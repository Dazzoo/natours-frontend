import Api from '@/api/api';

class authApi extends Api {
  constructor() {
    super();
  }

  async SignUp(name, email, password, passwordConfirm) {
    const response = await this.request(
      () =>
        this.http.post('/api/v1/users/signup', {
          name,
          email,
          password,
          passwordConfirm,
          role: 'user',
        }),
      {
        notify_success: true,
        notify_error: true,
      }
    );
    if (String(response.status)?.startsWith('2')) {
      return true;
    }
  }

  async Login(email, password) {
    const response = await this.request(
      () =>
        this.http.post('/api/v1/users/login', {
          email,
          password,
        }),
      {
        notify_error: true,
      }
    );
    if (response?.data.token) {
      return response.data.token;
    }
  }

  async getMe(token) {
    const response = await this.request(() =>
      this.http.get('/api/v1/users/me', { headers: { token: token } })
    );
    if (response?.data.data.data) {
      return response.data.data.data;
    }
  }
  async logOut() {
    const response = await this.request(() => this.http.get('/api/v1/users/logout'));
    if (response?.data.status) {
      return response.data.status;
    }
  }

  async updateUserInfo(name, email, password) {
    const response = await this.request(
      () =>
        this.http.patch('/api/v1/users/update-info', {
          name,
          email,
          password,
        }),
      {
        notify_success: true,
        notify_error: true,
      }
    );
    if (response?.status) {
      return response.status;
    }
  }
  async updateUserPassword(password, passwordNew, passwordConfirmNew) {
    const response = await this.request(
      () =>
        this.http.patch('/api/v1/users/update-password', {
          password,
          passwordNew,
          passwordConfirmNew
        }),
      {
        notify_success: true,
        notify_error: true,
      }
    );
    if (response?.status) {
      return response.status;
    }
  }
  async verifyEmail(emailToken) {
    const response = await this.request(
      () =>
        this.http.get(`/api/v1/users/verifyEmail/${emailToken}`)
    );
    if (response) {
      return response;
    }
  }
}

export default new authApi();
